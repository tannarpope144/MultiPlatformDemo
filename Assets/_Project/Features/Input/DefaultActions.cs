//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/Features/Input/DefaultActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Multiplatform
{
    public partial class @DefaultActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DefaultActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultActions"",
    ""maps"": [
        {
            ""name"": ""CharacterController"",
            ""id"": ""7557b8ae-033a-4525-beae-d74e7a9ebf76"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b6b2bf1b-7d96-45b7-91ed-918d1edf1985"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""8e46f11f-ba10-40a6-b924-f89a095706c6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""fda757ef-eb14-424a-ade5-b2261cf4886c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c68017fa-6c54-4478-9e08-d250ca7558ff"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e4fe7bbe-5d0a-46ab-b595-fe08a254af55"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""05d4b281-6aab-41b2-b54f-6a8b5219dfd7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1290c1b5-57ab-4a3c-8ae0-5bb24a5313f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4a38b665-56d8-41b8-a68a-f25936d4a6e6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""QE"",
                    ""id"": ""ef90a527-2d57-4248-8de7-84d77f4b3184"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""958300f8-6db1-4802-b093-2bf581ba4862"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e5463740-30eb-48df-859a-8d5bc05af7e6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ec1a9775-3e4e-47c6-a90b-96f15230a1ec"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CharacterController
            m_CharacterController = asset.FindActionMap("CharacterController", throwIfNotFound: true);
            m_CharacterController_Movement = m_CharacterController.FindAction("Movement", throwIfNotFound: true);
            m_CharacterController_Rotate = m_CharacterController.FindAction("Rotate", throwIfNotFound: true);
            m_CharacterController_Sprint = m_CharacterController.FindAction("Sprint", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterController
        private readonly InputActionMap m_CharacterController;
        private ICharacterControllerActions m_CharacterControllerActionsCallbackInterface;
        private readonly InputAction m_CharacterController_Movement;
        private readonly InputAction m_CharacterController_Rotate;
        private readonly InputAction m_CharacterController_Sprint;
        public struct CharacterControllerActions
        {
            private @DefaultActions m_Wrapper;
            public CharacterControllerActions(@DefaultActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_CharacterController_Movement;
            public InputAction @Rotate => m_Wrapper.m_CharacterController_Rotate;
            public InputAction @Sprint => m_Wrapper.m_CharacterController_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_CharacterController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControllerActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterControllerActions instance)
            {
                if (m_Wrapper.m_CharacterControllerActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMovement;
                    @Rotate.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnRotate;
                    @Rotate.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnRotate;
                    @Rotate.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnRotate;
                    @Sprint.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnSprint;
                }
                m_Wrapper.m_CharacterControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Rotate.started += instance.OnRotate;
                    @Rotate.performed += instance.OnRotate;
                    @Rotate.canceled += instance.OnRotate;
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                }
            }
        }
        public CharacterControllerActions @CharacterController => new CharacterControllerActions(this);
        public interface ICharacterControllerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnRotate(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
    }
}
